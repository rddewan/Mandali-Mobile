definitions:
  # Reusable definitions go in this section
  scripts:
    - &setup_local_and_key_properties
      name: Set up local and key properties
      script: | 
        echo $LOCAL_PROPERTIES > $CM_BUILD_DIR/android/local.properties
        echo $KEY_PROPERTIES > $CM_BUILD_DIR/android/key.properties

    - &setup_code_signing_on_xcode_project
      name: Set up code signing settings on Xcode project
      script: | 
        xcode-project use-profiles
  
    - &setup_env
      name: Set up env
      script: | 
        echo $ENV_DEV | base64 --decode > $CM_BUILD_DIR/packages/core/.dev.env  
        cat $CM_BUILD_DIR/packages/core/.dev.env  
        echo $ENV_QA | base64 --decode > $CM_BUILD_DIR/packages/core/.qa.env
        cat $CM_BUILD_DIR/packages/core/.qa.env
        echo $ENV_PROD | base64 --decode > $CM_BUILD_DIR/packages/core/.prod.env 
        cat $CM_BUILD_DIR/packages/core/.prod.env 

    - &setup_translation_credentials
      name: Set up Translation Credentials
      script: | 
        echo $TRANSLATION_CREDENTIALS > $CM_BUILD_DIR/packages/common/credentials.json
        
    - &setup_android_firebase_googleService
      name: Set up Firebase GoogleService.json
      script: | 
        echo $GOOGLE_SERVICE_DEV > $CM_BUILD_DIR/android/app/src/dev/google-services.json
               
        echo $GOOGLE_SERVICE_QA > $CM_BUILD_DIR/android/app/src/qa/google-services.json

        echo $GOOGLE_SERVICE_PROD > $CM_BUILD_DIR/android/app/src/prod/google-services.json
        

    - &setup_ios_firebase_googleService
      name: Set up Firebase GoogleService-Info.plist
      script: |  

        # Write out the GoogleService-Info.plist file
        echo Write out the GoogleService-Info.plist file

        echo $GOOGLE_SERVICE_INFO_DEV  > $CM_BUILD_DIR/ios/Runner/Firebase/Dev/GoogleService-Info.plist
        
        echo $GOOGLE_SERVICE_INFO_QA  > $CM_BUILD_DIR/ios/Runner/Firebase/QA/GoogleService-Info.plist
      
        echo $GOOGLE_SERVICE_INFO_PROD > $CM_BUILD_DIR/ios/Runner/Firebase/Prod/GoogleService-Info.plist
        

    - &shorebird_install
      name: Install Shorebird CLI
      script: |
        # Install Shorebird CLI
        curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash

        # Add Shorebird to PATH
        echo PATH="$HOME/.shorebird/bin:$PATH" >> $CM_ENV
    
    - &ios_pod_install
      name: Install pods
      script: |
        find . -name "Podfile" -execdir pod install --repo-update \;
    
    - &get_flutter_translation_files
      name: Get Flutter Translation Files
      script: |      
        cd packages/common
        echo Fetching translation data        
        dart run flutter_translation_sheet:main fetch
        cd ../../
        echo Done fetching translation data  

    - &build_runner
      name: Run build_runner
      script: |        
        cd packages/core
        pwd
        
        echo Getting dependencies
        flutter pub get > /dev/null

        echo Running build_runner in packages/core        
        flutter pub run build_runner clean
        flutter pub run build_runner build -d 
        flutter pub get > /dev/null

        echo Done running build_runner. Navigating up to root directory
        cd ../../    
        flutter pub get > /dev/null    

    - &get_dependencies
      name: Get the dependencies
      script: |
          # Get the dependencies
          flutter pub get
      ignore_failure: false 
    
    - &flutter_analyze
      name: Run static code analysis
      script: |
          # Run static code analysis
          flutter analyze
      ignore_failure: false

    - &flutter_test
      name: Flutter unit test
      script: |
        flutter test
      ignore_failure: true
 
    
workflows:
  
  android_ios_build_dev:
    name: Android & iOS Workflow Dev
    labels: 
      - Dev
    instance_type: mac_mini_m1
    max_build_duration: 60
    integrations:
      app_store_connect: CodeMagicIntegration
    environment: 
      flutter: fvm  
      java: 17
      xcode: latest
      cocoapods: default
      groups:
        - keystore_credentials
        - env
        - firebase_credentials
        - google_credentials
        - email_recipients
        - shorebird_credentials
      vars:
        PACKAGE_NAME: "in.wecancode.mandali.dev"
      android_signing:
        - android_signing_certificate_wecancode
      ios_signing:
        distribution_type: development # app_store | ad_hoc | development | enterprise
        bundle_identifier: in.wecancode.mandali.dev 
    # cache:
    #   cache_paths:
    #     - $HOME/.gradle/caches
    #     - $HOME/Library/Caches/CocoaPods
    #     - $FLUTTER_ROOT/.pub-cache
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: dev
          include: true # This will ensure that the build runs on the proposed code changes within the feature branch when pull request is created or updated.
          source: false 
      cancel_previous_builds: true
    scripts:
      - *setup_code_signing_on_xcode_project

      - *setup_local_and_key_properties

      - *shorebird_install

      - *setup_env

      - *setup_ios_firebase_googleService

      - *setup_android_firebase_googleService

      - *setup_translation_credentials

      - *get_flutter_translation_files

      - *build_runner

      - *flutter_analyze
      
      - *flutter_test

      - *ios_pod_install
      
      - name: Flutter build android release
        script: |
          flutter build apk --debug \
          --build-name=1.0.0 \
          --build-number=$BUILD_NUMBER  \
          --flavor dev -t lib/main_dev.dart \
          --obfuscate --split-debug-info=build/ios/symbols

      - name: Flutter build iOS debug
        script: |
          flutter build ipa --debug \
          --build-name=1.0.0 \
          --build-number=$BUILD_NUMBER  \
          --flavor dev -t lib/main_dev.dart \
          --export-options-plist=$HOME/export_options.plist \
          --obfuscate --split-debug-info=build/ios/symbols


    artifacts:      
      - build/**/outputs/**/*.apk      
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - build/ios/symbols/**/*
      - /Users/builder/export_options.plist
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:      
      email:
        recipients:
          - $EMAIL_RECIPIENTS
        notify:
          success: true
          failure: true
      slack:
        channel: '#mandali-mobile-app-notification'
        notify_on_build_start: true
        notify: 
          success: true
          failure: true

  android_ios_build_qa:
    name: Android & iOS Workflow QA
    labels: 
      - QA
    instance_type: mac_mini_m1
    max_build_duration: 60
    integrations:
      app_store_connect: CodeMagicIntegration
    environment: 
      flutter: fvm  
      java: 17
      xcode: latest
      cocoapods: default
      groups:
        - keystore_credentials
        - env
        - firebase_credentials
        - google_credentials
        - email_recipients
        - shorebird_credentials
      vars:
        PACKAGE_NAME: "in.wecancode.mandali.qa"
        APP_STORE_APPLE_ID: 1642472180
        # Name of the track internal, alpha, beta, production, internal app sharing,      
        GOOGLE_PLAY_TRACK: internal 
      android_signing:
        - android_signing_certificate_wecancode
      ios_signing:
        distribution_type: ad_hoc # app_store | ad_hoc | development | enterprise
        bundle_identifier: in.wecancode.mandali.qa
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
        - $FLUTTER_ROOT/.pub-cache
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: qa
          include: true
          # Setting source:true, pattern:qa will trigger the build on the qa branch once the pull request has been 
          # merged from the feature branch into the qa branch.
          source: true 
      cancel_previous_builds: true
    scripts:
      - *setup_code_signing_on_xcode_project

      - *setup_local_and_key_properties

      - *shorebird_install

      - *setup_env

      - *setup_ios_firebase_googleService

      - *setup_android_firebase_googleService

      - *setup_translation_credentials

      - *get_flutter_translation_files

      - *build_runner

      - *flutter_analyze
      
      - *flutter_test

      - *ios_pod_install
      
      - name: Flutter build android release
        script: |          
          shorebird release android --artifact apk \
          --build-name=1.0.0 \
          --build-number=$BUILD_NUMBER  \
          --flavor qa -t lib/main_qa.dart \
          --obfuscate --split-debug-info=build/ios/symbols

      - name: Flutter Build iOS Release
        script: |
          shorebird release ios \
          --build-name=1.0.0 \
          --build-number=$BUILD_NUMBER  \
          --flavor qa -t lib/main_qa.dart \
          -- --export-options-plist=$HOME/export_options.plist \
          --obfuscate --split-debug-info=build/ios/symbols


    artifacts:      
      - build/**/outputs/**/*.apk      
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - build/ios/symbols/**/*
      - /Users/builder/export_options.plist
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      firebase:
          # use this line to authenticate via service account
          firebase_service_account: $FIREBASE_SERVICE_ACCOUNT_QA
          
          # or this line to authenticate via token:
          # firebase_token: $FIREBASE_TOKEN

          android:
            # Add your Android app id retrieved from Firebase console
            app_id: 1:85137171732:android:6d6edb92346ad73fed4e01 
            
            # Add one or more groups that you wish to distribute your Android application to.
            # You can create groups in the Firebase console
            groups: 
              - android
              
            artifact_type: 'apk' # Replace with 'apk' to only publish the Android app bundle

          ios:
            # Add your iOS app id retrieved from Firebase console
            app_id: 1:85137171732:ios:6d9680f17af65518ed4e01 
            
            # Add one or more groups that you wish to distribute your iOS application to.
            # You can create groups in the Firebase console
            groups:
              - ios     
            
      email:
        recipients:
          - $EMAIL_RECIPIENTS
        notify:
          success: true
          failure: true
      slack:
        channel: '#mandali-mobile-app-notification'
        notify_on_build_start: true
        notify: 
          success: true
          failure: true

  android_ios_build_prod:
    name: Android & iOS Workflow Prod
    labels: 
      - Prod
    instance_type: mac_mini_m1
    max_build_duration: 60
    integrations:
      app_store_connect: CodeMagicIntegration
    environment: 
      flutter: fvm  
      java: 17
      xcode: latest
      cocoapods: default
      groups:
        - keystore_credentials
        - env
        - firebase_credentials
        - google_credentials
        - email_recipients
        - shorebird_credentials
      vars:
        PACKAGE_NAME: "in.wecancode.mandali"
        APP_STORE_APPLE_ID: 6444429146
        # Name of the track internal, alpha, beta, production, internal app sharing,      
        GOOGLE_PLAY_TRACK: production 
      android_signing:
        - android_signing_certificate_wecancode
      ios_signing:
        distribution_type: app_store # app_store | ad_hoc | development | enterprise
        bundle_identifier: in.wecancode.mandali
    cache:
      cache_paths:
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
        - $FLUTTER_ROOT/.pub-cache
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true #  Setting source:true, pattern:main will trigger the build on the main branch once the pull request has been merged from the feature branch into the main branch.
      cancel_previous_builds: true
    scripts:
      - *setup_code_signing_on_xcode_project

      - *setup_local_and_key_properties

      - *shorebird_install

      - *setup_env

      - *setup_ios_firebase_googleService

      - *setup_android_firebase_googleService

      - *setup_translation_credentials

      - *get_flutter_translation_files

      - *build_runner

      - *flutter_analyze
      
      - *flutter_test

      - *ios_pod_install
      
      - name: Flutter build android release .aab
        script: |           
          flutter build appbundle --release \
          --build-name=1.0.0 \
          --build-number=$BUILD_NUMBER  \
          --flavor prod -t lib/main_prod.dart \
          --obfuscate --split-debug-info=build/ios/symbols

      - name: Flutter Build iOS Release
        script: |          
          flutter build ipa --release \
          --build-name=1.0.0 \
          --build-number=$BUILD_NUMBER  \
          --flavor prod -t lib/main_prod.dart \
          -- --export-options-plist=$HOME/export_options.plist \
          --obfuscate --split-debug-info=build/ios/symbols


    artifacts:      
      - build/**/outputs/**/*.aab      
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - build/ios/symbols/**/*
      - /Users/builder/export_options.plist
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      google_play:
      #   # Contents of the JSON key file for Google Play service account saved
      #   # as a secure environment variable
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        
      #   # Name of the track internal, alpha, beta, production, internal app sharing,
      #   # or your custom track name
        track: beta
        
      #   # Optional Priority of the release (only set if in-app updates are supported)
      #   # integer in range [0, 5]
      #   #in_app_update_priority: 3

      #   # Optional. Rollout fraction (set only if releasing to a fraction of users)
      #   # value between (0, 1)
      #   #rollout_fraction: 0.25

      #   # Optional boolean To be used ONLY if your app cannot be sent for review automatically *
        changes_not_sent_for_review: false

      #   # Optional boolean. Publish artifacts under a draft release.
      #   # Can not be used together with rollout_fraction. Defaults to false
        submit_as_draft: false # true for internal test
      
      app_store_connect:
        # Use referenced App Store Connect API key to authenticate binary upload
        auth: integration 

      #   # Configuration related to TestFlight (optional)

      #   # Optional boolean, defaults to false. Whether or not to submit the uploaded
      #   # build to TestFlight beta review. Required for distributing to beta groups.
      #   # Note: This action is performed during post-processing.
        submit_to_testflight: true

      #   # Optional boolean, defaults to false. Set to true to automatically expire 
      #   # previous build in review or waiting for review in Testflight before
      #   # submitting a new build to beta review. Expired builds will no longer be available for testers.
      #   # Note: This action is performed during post-processing.
      #   expire_build_submitted_for_review: true

      #   # Specify the names of beta tester groups that will get access to the build 
      #   # once it has passed beta review.
      #  beta_groups: 
      #    - External
        
        
        # Configuration related to App Store (optional)

        # Optional boolean, defaults to false. Whether or not to submit the uploaded
        # build to App Store review. Note: This action is performed during post-processing.
        submit_to_app_store: true

        # Optional boolean, defaults to false. Set to true to cancel the previous 
        # submission (if applicable) when submitting a new build to App Store review.
        # This allows automatically submitting a new build for review if a previous submission exists.
        # Note: This action is performed during post-processing.
        #cancel_previous_submissions: false
        
        # Optional, defaults to MANUAL. Supported values: MANUAL, AFTER_APPROVAL or SCHEDULED
        release_type: AFTER_APPROVAL

        # Optional. Timezone-aware ISO8601 timestamp with hour precision when scheduling
        # the release. This can be only used when release type is set to SCHEDULED.
        # It cannot be set to a date in the past.
        #earliest_release_date: 2021-12-01T14:00:00+00:00 
        
        # Optional. The name of the person or entity that owns the exclusive rights
        # to your app, preceded by the year the rights were obtained.
        copyright: 2024 © WeCanCode

      email:
        recipients:
          - $EMAIL_RECIPIENTS
        notify:
          success: true
          failure: true
      slack:
        channel: '#mandali-mobile-app-notification'
        notify_on_build_start: true
        notify: 
          success: true
          failure: true

  